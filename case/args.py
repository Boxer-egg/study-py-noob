'''
1. `*` 解包：用于元组和列表。
   - 当你在函数调用中使用 `*`，它会将元组或列表中的元素解包，并将它们作为位置参数传递给函数。
   - 示例：`func(*[1, 2, 3])` 等同于 `func(1, 2, 3)`。

2. `**` 解包：用于字典。
   - 当你在函数调用中使用 `**`，它会将字典中的键值对解包，并将它们作为关键字参数传递给函数。
   - 示例：`func(**{'a': 1, 'b': 2})` 等同于 `func(a=1, b=2)`。

'''


def myfunc(a, *b, **c):
    print(a, b, c)


myfunc(1, 2, 4, 4, 5, 7, x=99, y=6)
# 输出为：1 (2, 4, 4, 5, 7) {'x': 99, 'y': 6}

'''
这个代码展示了 Python 函数的参数传递中的两个特性：`*args` 和 `**kwargs`。

1. a：这是一个普通的位置参数。

2. *b：这是一个特殊的参数，它可以接收任意数量的位置参数，并将它们存储为一个元组。
在这个例子中，它接收了所有传递给 `myfunc` 的位置参数（除了第一个，因为第一个位置参数已经被 `a` 接收了）。

3. **c：这是另一个特殊的参数，它可以接收任意数量的关键字参数，并将它们存储为一个字典。
在这个例子中，它接收了所有传递给 `myfunc` 的关键字参数。

当你调用 `myfunc(1, 2, 4, 4, 5, 7, x=99, y=6)` 时：

- a 接收了第一个位置参数 `1`。
- *b 接收了所有其他的位置参数 `(2, 4, 4, 5, 7)`，并将它们存储为一个元组。
- **c 接收了所有的关键字参数 `{'x': 99, 'y': 6}`，并将它们存储为一个字典。

因此，`print(a, b, c)` 语句输出了：`1 (2, 4, 4, 5, 7) {'x': 99, 'y': 6}`。

这种参数传递方式在你不确定将要传递给函数多少个参数，或者参数的类型（位置参数或关键字参数）时非常有用。
'''

args = (1, 2, 3, 4)


def myfunc2(a, b, c, d):
    print(a, b, c, d)


myfunc2(*args)  # 解包
'''
args 是一个包含四个元素的元组。
当你调用 myfunc2(*args) 时，*args 会将元组 args 中的每个元素解包，
并按顺序传递给 myfunc2 函数。所以，a 接收 1，b 接收 2，c 接收 3，d 接收 4。
print(a, b, c, d) 会输出 1 2 3 4
'''


kwargs = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
myfunc2(**kwargs)
'''
kwargs 是一个包含四个键值对的字典。
当你调用 myfunc2(**kwargs) 时，**kwargs 会将字典 kwargs 中的每个键值对解包，
并将它们作为关键字参数传递给 myfunc2 函数。所以，a 接收 1，b 接收 2，c 接收 3，d 接收 4。
print(a, b, c, d) 会输出 1 2 3 4。
'''
