# demo10-2.py

def fun(arg1, arg2):
    print('arg1:', id(arg1), arg1)
    print('arg2:', id(arg2), arg2)
    arg1 = 100  # 传值，函数内部修改不会影响外部的值
    arg2.append(101)  # 传引用 ，函数内的修改会影响到外部的值。
    print('arg1:', id(arg1), arg1)
    print('arg2:', id(arg2), arg2)


n1 = [133]
n2 = [11, 23]
fun(n1, n2)  # 位置传参 arg1，2是形参。调用时，是实参

print(n1, id(n1), n2, id(n2))

'''
在编程中，"值"和"引用"是两个重要的概念。

"值"通常指的是一个具体的数据，例如一个整数、一个字符串或者一个列表等。
例如，在Python中，你可以创建一个值为100的整数，或者一个值为"Hello"的字符串。

"引用"则是指向一个值的指针或者链接。当你在Python中创建一个变量并给它赋值时，
这个变量实际上就是一个引用，它指向了你给它赋的那个值。例如，如果你写`x = 100`，
那么`x`就是一个引用，它指向了值100。

当我们说"传值"时，我们通常是说：我们将一个值复制一份，然后将这个复制的值传给函数。
函数接收到的是这个复制的值，因此它对这个值的任何修改都不会影响到原来的值。
因为它接收的只是一个复制品，原来的值还在原处。

而当我们说"传引用"时，我们是说：我们将一个引用传给函数。
函数接收到的是这个引用，因此它对引用所指向的值的任何修改，
都会影响到这个引用所指向的原来的值。因为它接收的是一个引用，
也就是一个指向原来的值的链接，所以它可以通过这个链接修改原来的值。

这就是"传值"和"传引用"的基本概念。然而，值得注意的是，
Python中的参数传递并不完全符合这两种模式，它实际上是一种"传对象引用"的方式。
在这种方式中，无论参数是可变对象（如列表、字典）还是不可变对象（如整数、字符串），
都是将对象的引用传给函数。只不过对于不可变对象，由于它们不能被修改，
所以在函数内部看起来就像是传值一样；而对于可变对象，因为它们可以被修改，
所以在函数内部看起来就像是传引用一样。
'''
